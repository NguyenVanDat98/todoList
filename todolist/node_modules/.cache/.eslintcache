[{"F:\\git learn\\learn\\todolist\\src\\index.js":"1","F:\\git learn\\learn\\todolist\\src\\App.js":"2","F:\\git learn\\learn\\todolist\\src\\reportWebVitals.js":"3","F:\\git learn\\learn\\todolist\\src\\componentCard\\data.js":"4","F:\\git learn\\learn\\todolist\\src\\componentCard\\Test.jsx":"5","F:\\git learn\\learn\\todolist\\src\\componentCard\\header\\Header.jsx":"6","F:\\git learn\\learn\\todolist\\src\\componentCard\\header\\FormHeader.jsx":"7","F:\\git learn\\learn\\todolist\\src\\componentCard\\sidebar\\Sidebar.jsx":"8"},{"size":604,"mtime":1658568119364,"results":"9","hashOfConfig":"10"},{"size":915,"mtime":1658604619289,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1658284943722,"results":"12","hashOfConfig":"10"},{"size":781,"mtime":1658569204476,"results":"13","hashOfConfig":"10"},{"size":1454,"mtime":1658570921976,"results":"14","hashOfConfig":"10"},{"size":1049,"mtime":1658577504137,"results":"15","hashOfConfig":"10"},{"size":978,"mtime":1658560641754,"results":"16","hashOfConfig":"10"},{"size":290,"mtime":1658578084189,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nr4gj",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"F:\\git learn\\learn\\todolist\\src\\index.js",[],[],"F:\\git learn\\learn\\todolist\\src\\App.js",[],[],"F:\\git learn\\learn\\todolist\\src\\reportWebVitals.js",[],[],[],"F:\\git learn\\learn\\todolist\\src\\componentCard\\data.js",[],[],"F:\\git learn\\learn\\todolist\\src\\componentCard\\Test.jsx",["46","47","48","49"],[],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\nfunction Testa(props) {\r\n  const { tit, name, mess } = props;\r\n  const [status, setTus] = useState(\"Start\");\r\n  const [colorr, setcolor] = useState(' #04BE00');\r\n  const [text, settext] = useState(\"New\"); \r\n  \r\n  function settxt() { \r\n    \r\n     if ( status === \"Start\") {\r\n      setTus('Done');\r\n      setcolor('#F88F14');\r\n      settext('Doing');\r\n      props.tt = text\r\n      console.log( text);\r\n    \r\n    } else if ( status === \"Done\") {\r\n      setTus('Renew');\r\n      setcolor('#675BF1');\r\n      settext('Done') ;\r\n      props.tt = text\r\n      console.log( text);\r\n    \r\n    }else {\r\n      setTus('Start');\r\n      setcolor('#04BE00');\r\n      settext('New')  \r\n      props.tt = text     \r\n      console.log( text);\r\n\r\n    }  \r\n    console.log(props.tt);\r\n  }\r\n  return (\r\n    \r\n    <div className=\"taskItem mx-2 my-2 px-2 py-2\">\r\n      <label> Title : <a> {tit}</a> </label><br></br>\r\n      <label> Creator : <a>{name} </a></label><br></br>\r\n    <label> <a style={{color :colorr}} >Status:{ text } </a></label><br></br>\r\n     <div> Desscription: \r\n     <p>{mess}</p></div>\r\n      <button type='button' className='btn-primary' onClick={settxt} >{status}</button>\r\n    </div>\r\n    \r\n  )\r\n};\r\nTesta.propTypes = {\r\n\r\n}\r\nTesta.defaultProps = {\r\n  tit: \"title 1\",\r\n  name: \"name\",\r\n  status: \"status 1\",\r\n  mess: \"messs\",\r\n}\r\n\r\n\r\n\r\nexport default Testa;","F:\\git learn\\learn\\todolist\\src\\componentCard\\header\\Header.jsx",["50"],[],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./StyleHeader.css\"\r\nimport FormHeader from './FormHeader';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst Header = props => {\r\n    const [tus , settus] =  useState(\"none\"); \r\n    \r\n   \r\n\r\n    function btn (){\r\n        if(tus===\"none\"){\r\n            settus(\"block\")\r\n            document.getElementById(\"list\").style.display =\"none\"\r\n\r\n        }else {\r\n            settus(\"none\")\r\n            document.getElementById(\"list\").style.display =\"flex\"\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div  className='header w-100 bg-primary justify-content-between'>\r\n            <FormHeader sty={tus}/>\r\n            <div className=\"home\">\r\n                <button onClick={btn}  type=\"button\">Home</button>\r\n            </div>\r\n            <div className=\"search\">\r\n                <input type=\"search\" placeholder='Search' />        \r\n                <button>Search</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    \r\n};\r\n\r\nexport default Header;","F:\\git learn\\learn\\todolist\\src\\componentCard\\header\\FormHeader.jsx",[],[],"F:\\git learn\\learn\\todolist\\src\\componentCard\\sidebar\\Sidebar.jsx",["51"],[],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./sidebar.css\"\r\nconst Sidebar = props => {\r\n    return (\r\n        <div className='side'>\r\n            <button onClick={props.handbal} >{props.title} </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Sidebar;",{"ruleId":"52","severity":1,"message":"53","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":17},{"ruleId":"56","severity":1,"message":"57","line":40,"column":23,"nodeType":"58","endLine":40,"endColumn":26},{"ruleId":"56","severity":1,"message":"57","line":41,"column":25,"nodeType":"58","endLine":41,"endColumn":28},{"ruleId":"56","severity":1,"message":"57","line":42,"column":13,"nodeType":"58","endLine":42,"endColumn":41},{"ruleId":"52","severity":1,"message":"53","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":17},{"ruleId":"52","severity":1,"message":"53","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":17},"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]